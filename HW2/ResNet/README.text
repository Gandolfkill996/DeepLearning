-------------------------------------------
1Ô∏è‚É£  TRAINING THE MODEL
-------------------------------------------

To train the ResNet models at different learning rates (0.1, 0.01, 0.001),
run the following commands in Terminal:

    cd HW2/ResNet
    python ResNet.py

During training, the script will:
  ‚Ä¢ Train ResNet18 models at 3 different learning rates.
  ‚Ä¢ Save the best model (based on validation accuracy) to:
        outputs/lr_<learning_rate>/best_resnet_lr<learning_rate>.pth
  ‚Ä¢ Generate plots for loss, accuracy, ROC curve, and feature visualizations.
  ‚Ä¢ Print best Accuracy, F1-score, and AUC for each model in Terminal.

-------------------------------------------
2Ô∏è‚É£  TESTING THE MODEL (using test_model)
-------------------------------------------

After training, you can evaluate the best ResNet18 model on **10% of the MNIST test dataset**
using the built-in `test_model()` function.

Example (for the model trained with lr = 0.001):

    cd HW2/ResNet
    python ResNet.py

Then in Terminal (interactive Python mode or inside the main block):

    >>> from ResNet import test_model
    >>> import torch
    >>> device = torch.device("cuda" if torch.cuda.is_available() else
    ...                       "mps" if torch.backends.mps.is_available() else "cpu")
    >>> test_model("outputs/lr_0.001/best_resnet_lr0.001.pth", device)

Or simply run the test block already included in ResNet.py:
    python ResNet.py --test

This function will:
  ‚Ä¢ Load the trained ResNet18 model weights from the specified .pth file.
  ‚Ä¢ Load the MNIST test dataset (10% subset only).
  ‚Ä¢ Evaluate Accuracy, F1-score, and AUC.
  ‚Ä¢ Generate and save a new ROC curve at:
        outputs/test_eval/roc_curve.png
  ‚Ä¢ Print metrics to Terminal, e.g.:
        ‚úÖ Test Results (ResNet, lr=0.001) -> Accuracy: 0.9764, F1: 0.9759, AUC: 0.9990
        üìä ROC curve saved to outputs/test_eval/roc_curve.png

-------------------------------------------
3Ô∏è‚É£  OUTPUT FILES
-------------------------------------------

Each learning rate folder (lr_0.1, lr_0.01, lr_0.001) contains:
  - best_resnet_lr*.pth         ‚Üí Saved best model weights.
  - accuracy_curve.png          ‚Üí Train/validation accuracy curve.
  - loss_curve.png              ‚Üí Train/validation loss curve.
  - roc_curve.png               ‚Üí ROC curve of validation/test dataset.
  - layer1_features.png         ‚Üí Visualization of ResNet block 1 filters.
  - layer2_features.png         ‚Üí Visualization of ResNet block 2 filters.

-------------------------------------------
4Ô∏è‚É£  DEVICE SUPPORT
-------------------------------------------
The code automatically detects device:
  ‚Ä¢ NVIDIA GPU ‚Üí CUDA
  ‚Ä¢ Apple Silicon ‚Üí MPS
  ‚Ä¢ Otherwise ‚Üí CPU

You will see:
    ‚úÖ Using device: NVIDIA GeForce RTX 3060
or
    ‚úÖ Using device: Apple MPS GPU

-------------------------------------------
5Ô∏è‚É£  NOTES
-------------------------------------------
‚Ä¢ MNIST dataset will be automatically downloaded to:
    ../data/MNIST/
‚Ä¢ All training and testing outputs are saved in `outputs/`.
‚Ä¢ `.gitignore` excludes data, cache, and output folders from GitHub uploads.
‚Ä¢ You can modify batch size, epochs, or learning rates inside ResNet.py for experiments.